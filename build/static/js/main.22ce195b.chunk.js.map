{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Item/Item.js","Components/ItemsList/ItemsList.js","Components/Cart/Cart.js","util/Nutritionix.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","foodItem","maxCalories","Infinity","handleItemChange","bind","handleCaloriesChange","handleSearchResultsNormal","handleSearchResultsSorted","sortByCalories","event","this","setState","target","value","Number","productArray","sort","a","b","calories","err","console","log","getNutrition","preventDefault","className","id","placeholder","onChange","onClick","React","Component","axios","require","Item","addToShoppingCart","deleteFromShoppingCart","brand","product","name","serving_size","serving_unit","image_src","post","alert","window","location","reload","delete","action","method","type","ItemsList","productArraySize","isUndefined","products","length","count","map","item","key","Cart","getCartData","deleteAll","data","productList","get","then","response","i","push","Nutrition","search","sortByFunc","Url","headers","toFixed","App","searchResults","productArrayReal","filter","addEventListener","returnValue","resetBackendData","href","clearOutOldData","removeEventListener","rel","src","alt","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22ce195b.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\n\nexport class SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            foodItem : '',\n            maxCalories : Infinity\n        };   \n        this.handleItemChange = this.handleItemChange.bind(this);\n        this.handleCaloriesChange = this.handleCaloriesChange.bind(this);\n        this.handleSearchResultsNormal = this.handleSearchResultsNormal.bind(this);\n        this.handleSearchResultsSorted = this.handleSearchResultsSorted.bind(this);\n        this.sortByCalories = this.sortByCalories.bind(this);\n    }\n        \n\n    handleItemChange(event){\n        this.setState({\n            foodItem : event.target.value\n        })\n    }\n\n    handleCaloriesChange(event){\n        this.setState({\n            maxCalories : Number(event.target.value)\n        })\n    }\n\n    sortByCalories(productArray){\n        try{\n            productArray.sort(function(a,b){return a.calories - b.calories});\n        }catch(err){\n            console.log('Was not able to sort due to no results popping up')\n        }  \n    }\n\n    handleSearchResultsNormal(event){\n        //This is for when the sort by best match is rendered\n        this.props.getNutrition(this.state.foodItem,this.state.maxCalories, null);\n        event.preventDefault();\n    }\n\n    handleSearchResultsSorted(event){\n        //This is for when the sort by lowest calories is rendered\n        this.props.getNutrition(this.state.foodItem, this.state.maxCalories, this.sortByCalories);\n        event.preventDefault();\n    }\n\n    render(){\n        return (\n            <div className = \"Bar\" id = \"background_image\">\n                <div className = \"SearchBar\">\n                    <input placeholder = \"Enter Food Item\" onChange = {this.handleItemChange}/>\n                    <input placeholder = \"Max Calories per Serving\" onChange = {this.handleCaloriesChange}/>\n                </div>\n                <div>\n                    <h2>Sort By:</h2>\n                    <ul>\n                        <li><button onClick = {this.handleSearchResultsNormal}>Best Match</button></li>\n                        <li><button onClick = {this.handleSearchResultsSorted}>Lowest Calories</button></li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Item.css';\nconst axios = require('axios')\n\nexport class Item extends React.Component{\n    constructor(props){\n        super(props);\n        this.addToShoppingCart = this.addToShoppingCart.bind(this);\n        this.deleteFromShoppingCart = this.deleteFromShoppingCart.bind(this);\n    }\n    addToShoppingCart(){\n        let brand = this.props.product.brand;\n        let name = this.props.product.name;\n        let calories = this.props.product.calories;\n        let serving_size = this.props.product.serving_size;\n        let serving_unit = this.props.product.serving_unit;\n        let image_src = this.props.product.image_src;\n\n        if (name){\n            axios.post(`https://obscure-citadel-45579.herokuapp.com/ShoppingCart/Create/?brand=${brand}\n            &name=${name}&calories=${calories}&serving_size=${serving_size}\n            &serving_unit=${serving_unit}&image_src=${image_src}`);\n        }\n        // Check if the item is from the itemslist or the shopping cart.\n        // We only want to reload page if the user is in the shopping cart page.\n        if(!this.props.product.id){\n            window.location.reload();\n        }else{\n            alert(\"Product successfully added to Shopping Cart on Top Right\");\n        }\n\n    }\n    deleteFromShoppingCart(){\n        let image_src = this.props.product.image_src;\n        if(image_src){\n            axios.delete(`https://obscure-citadel-45579.herokuapp.com/ShoppingCart/delete/?image_src=${image_src}`);\n        }\n        alert(\"Product successfully removed from Shopping Cart\");\n    }\n    render(){\n        if (this.props.product == null){\n            return(\n                <div></div>\n            );\n        }\n        return(\n            <div className = 'Item'>\n                <div className = 'Item-brand'>\n                    <p>Brand: {this.props.product.brand}</p>\n                </div>\n                <div className = 'Item-name'>\n                    <p>{this.props.product.name}</p>\n                </div>\n                <hr></hr>\n                <div className = 'Item-information'>\n                    <p><b>Calories:</b> {this.props.product.calories}</p>\n                    <p><b>Serving Size:</b> {this.props.product.serving_size}</p>\n                    <p><b>Serving Unit:</b> {this.props.product.serving_unit}</p>\n                </div>\n                <div className = \"buttons\">\n                    <form action={this.props.product.image_src} method=\"get\" target=\"_blank\">\n                        <button type=\"submit\">Click for Image</button>\n                    </form>\n                    <button onClick = {this.addToShoppingCart}>Add to Cart</button>\n                    <button onClick = {this.deleteFromShoppingCart}>Remove from Cart</button>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './ItemsList.css';\nimport {Item} from '../Item/Item';\n\nexport class ItemsList extends React.Component{\n    render(){\n        // Check to see if results were found \n        let productArraySize;\n        let isUndefined = false;\n        try{\n            productArraySize = this.props.products.length;\n        }catch(err){\n            isUndefined = true;\n            console.log('No results were found')\n        }\n        if ((productArraySize === 0 && this.props.count === 1) || isUndefined){\n            return(\n                <div className = 'no_results'>\n                    <h1>No Results Found!</h1>\n                    <h3>Try again with different filters</h3>\n                </div>\n            )\n        } else{\n            return(\n                <div className = 'Items_list'>\n                    {this.props.products.map(item=>{\n                        return <Item product = {item} key = {item.id}/>\n                    }\n                    )}\n    \n                </div>\n            )\n        }\n    }\n}","import React from 'react';\nimport './Cart.css';\nimport {Item} from '../Item/Item';\nconst axios = require('axios');\n\nexport class Cart extends React.Component{\n    constructor(props){\n        super(props);\n        this.getCartData = this.getCartData.bind(this);\n        this.reload = this.reload.bind(this);\n        this.deleteAll = this.deleteAll.bind(this);\n        this.state = {\n            data: []\n        }\n    }\n    getCartData(){\n        let productList = [];\n        let data = axios.get(`https://obscure-citadel-45579.herokuapp.com/ShoppingCart`);\n        data.then(response=>{\n            let products = response['data'];\n            for (let i = 0; i < products.length;i++){\n                productList.push(products[i]);\n            }\n            this.setState({data: productList});\n        })\n    }\n    deleteAll(){\n        axios.delete(`https://obscure-citadel-45579.herokuapp.com/ShoppingCart/deleteall`);\n        alert(\"All products successfully removed from shopping cart.\");\n    }\n    reload(){\n        window.location.reload();\n    }\n    componentDidMount(){\n        this.getCartData();\n    }\n\n    render(){\n        if (this.state.data.length === 0){\n            return(\n                <div>\n                    <h1>Shopping Cart</h1>\n                    <button onClick = {this.reload}>Refresh Cart</button>\n                    <h3>Nothing added to Shopping Cart yet.</h3>\n                </div>\n            )\n        }\n        return(\n            <div className = \"Items-list\">\n                <h1>Shopping Cart</h1>\n                <button onClick = {this.reload}>Refresh Cart</button>\n                <div className = \"Items\">\n                    {this.state.data.map(item=>{\n                        return(\n                            <span className = 'IndividualItem'>\n                                <Item product = {item} key = {item.calories}></Item>\n                            </span>\n                        )\n                    })}\n                </div>\n                <button onClick = {this.deleteAll}>Remove All</button>\n\n            </div>\n\n        )\n    }\n}","const axios = require('axios');\n\n\nconst appId = '34f6f25d';\nconst appKey = '9fabfd8e5046ef072c7169f29614bf23';\n\nconst Nutrition = {\n    search(foodItem, maxCalories, sortByFunc){\n        const Url = `https://trackapi.nutritionix.com/v2/search/instant?query=${foodItem}`;\n        const data = axios.get(Url, {\n            headers: {\n                \"x-app-id\" : appId,\n                \"x-app-key\" : appKey\n            }\n        }).then(response => {\n            return response[\"data\"][\"branded\"]\n        }).then(products => {\n            return products.map(product => ({\n                brand: product[\"brand_name\"],\n                name: product[\"food_name\"],\n                id: product[\"nix_item_id\"],\n                serving_size: product[\"serving_qty\"].toFixed(2),\n                serving_unit: product[\"serving_unit\"],\n                image_src: product[\"photo\"][\"thumb\"],\n                calories: product[\"nf_calories\"].toFixed(0)\n            })\n            )\n        });\n        return data;\n    }\n};\n\n\nexport default Nutrition;","import React from 'react';\nimport './App.css';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {ItemsList} from '../ItemsList/ItemsList';\nimport {Cart} from '../Cart/Cart';\nimport Nutrition from '../../util/Nutritionix';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nconst axios = require('axios');\n\n\nexport class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      count : 0\n    };\n    this.getNutrition = this.getNutrition.bind(this);\n    }\n\n  getNutrition(foodItem, maxCalories, sortByFunc){\n    let productArray = [];\n    let data = Nutrition.search(foodItem);\n    data.then(response=> {\n      for (let i = 0; i < 20; i++){\n        productArray.push(response[i]);\n      }\n      //Filter out the results that are more than the max calories\n      let productArrayReal;\n      try{\n        productArrayReal = productArray.filter(product=>{\n          return product.calories <= maxCalories\n        });\n      }catch(err){\n        console.log(err)\n      }\n      //Sort by the function passed from SearchBar Component\n      if (sortByFunc){\n        sortByFunc(productArrayReal)\n      }\n      // Set state so we can pass the products to the items list and change count to 1 so\n      // we know that the function has already ran once\n      this.setState({searchResults: productArrayReal});\n      this.setState({count:1});\n    })\n  }\n  resetBackendData(){\n    axios.delete(`https://obscure-citadel-45579.herokuapp.com/ShoppingCart/deleteall`);\n  }\n  clearOutOldData(){\n    // This will make sure that every time a new page is brought up, old backend data from \n    // another user will be deleted.\n    window.addEventListener('load', (event) => {\n      event.preventDefault();\n      event.returnValue = '';\n      this.resetBackendData();\n    });    \n  }\n  componentDidMount(){\n    if (window.location.href !== \"http://localhost:3000/ShoppingCart\"){\n      this.clearOutOldData();\n    }\n  }\n  componentWillUnmount(){\n    // Cleanup the event listener that was added before.\n    if (window.location.href !== \"http://localhost:3000/ShoppingCart\"){\n      window.removeEventListener('load', (event) => {\n        event.preventDefault();\n        event.returnValue = '';\n        this.resetBackendData();\n      }\n    )};\n  }\n\n  render(){\n    return(\n      <Router>\n          <div className=\"header\">\n            <p className = \"nutritionix\"><b>Data from </b><a href = \"https://www.nutritionix.com/business/api\" target = \"_blank\" rel=\"noopener noreferrer\">Nutritionix API</a></p>\n            <div className = \"ShoppingCart\"><p><a href= \"/ShoppingCart\" target = \"_blank\">Shopping Cart</a></p></div>\n            <a href = '/ShoppingCart' target =\"_blank\">\n              <img src = \"https://icon2.cleanpng.com/20171220/jpe/shopping-cart-png-5a3a8fca5f1485.3449050215137873383895.jpg\" alt = \"Cart Logo\"></img>\n            </a>\n          </div>\n          <div className = \"break\"></div>\n          <Switch>\n            <Route path = \"/ShoppingCart\">\n              <div className = \"App\">\n                <Cart/>\n              </div>\n            </Route>\n            <Route path = \"/\">\n            <div className = \"App\">\n              <h1>Find the Calories</h1>\n              <SearchBar getNutrition = {this.getNutrition}/>\n              <ItemsList products = {this.state.searchResults} count = {this.state.count}/>  \n            </div>\n            </Route>\n          </Switch>\n      </Router>\n\n    );\n  }\n}\n\n\n  \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from '../src/Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}